#!/usr/bin/env ruby
# author: @takano32
#

require 'pit'
require 'logger'
require 'thread'  # for Mutex
require 'zabbixapi'
require 'json'

class Zabbix
  def initialize(user, password, url_prefix, apname_prefix="AP-")
    @logger = Logger.new(STDOUT)
    @logger.level = Logger::INFO
    @mutex = Mutex.new
    @api = ZabbixApi.connect(
      :url => "#{url_prefix}/api_jsonrpc.php",
      :user => user,
      :password => password
    )
    @associations = {}
    @traffics = {}
    @apname_prefix = apname_prefix

    @hosts = {}
    @logger.info 'Zabbix::init: get hosts...'
    begin
      hosts = @api.hosts.get(:output => 'extend')
    rescue RuntimeError, SocketError => e
      p e
    end
    @logger.info 'Zabbix::init: get hosts done.'
    hosts.each do |host|
      @hosts[host['hostid']] = host['name']
    end
  end

  def update
    @logger.info 'Zabbix::update: get items...'
    begin
      items = @api.items.get(:output => 'extend')
    rescue RuntimeError, SocketError => e
      p e
      sleep 15
      retry
    end
    @logger.info 'Zabbix::update: get items done.'
    # AP Associations count
    items.each do |item|
      next unless item['name'] =~ /Number of Clients/
      next unless item['key_'] =~ /(#{@apname_prefix}[0-9]{2})/
      ap = $1
      next unless item['name'] =~ /((2\.4|5)GHz)/
      band = $1.sub('.', '_').gsub(" ", "")
      @associations[ap] = {} if @associations[ap].nil?
      @associations[ap][band] = item['lastvalue'].to_i
    end
    # Traffic flow
    items.each do |item|
      next unless host_name = @hosts[item['hostid']]
      next unless item['name'] =~ /(Incoming|Outgoing) .*traffic on/
      direction = $1
      case item['key_']
      when /if(In|Out)Octets\[(.*)\]/
        target = $2
      when /net.if.(in|out)\[(.*)\]/
        target = $2
      else
        next
      end
      @traffics["#{host_name}-#{target}-#{direction}"] = item['lastvalue'].to_i
    end
  end

  def start
    @thread = Thread.start do |t|
      while true do
        @mutex.synchronize do
          @logger.debug 'Updating ...'
          update
          @logger.debug 'Update done.'
        end
        sleep 15
      end
    end
  end

  def stop
    @thread.join
  end

  def get_associations
    @mutex.synchronize do
      @logger.info 'Zabbix::get_associations'
      return @associations
    end
  end

  def get_traffics
    @mutex.synchronize do
      @logger.info 'Zabbix::get_traffics'
      return @traffics
    end
  end
end

if __FILE__ == $0 then
  config = Pit.get('conbu-api-daemon',
    :require => {
      user: 'zabbix username',
      password: 'zabbix password',
      url_prefix: 'prefix of zabbix URL',
      apname_prefix: "prefix of AP name ('AP-' + 001)"
    })
  zabbix = Zabbix.new(config[:user], config[:password], config[:url_prefix], config[:apname_prefix])
  zabbix.start

  require 'drb/drb'
  uri = 'druby://0.0.0.0:8282'
  DRb.start_service(uri, zabbix)
  zabbix.stop
  Drb.thread.join
end
